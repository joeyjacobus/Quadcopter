/*
  ESC_Ramp
    Based on the Sweep example in the Servo library, this allow a ramp up and down of the ESC speed based on the Min and Max values.
    The Min and Max speed are defined so you can change them at one location and it will be used in the ramp as well.
    
  27 April 2017
  by Eric Nantel
 */
#include "ESC.h"
#include "TimerThree.h"
#include <TimerOne.h>                                 // Header file for TimerOne library


#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <utility/imumaths.h> 


#define trigPin 13                                    // Trigger Sonar HC-SR04
#define echoPin 3                                     // Echo back pin HC-SR04
#define TIMER1_US 50                                   // 50 uS timer duration 
#define TICK_COUNTS 2000                              // 200 mS worth of timer ticks
#define SENSOR_DISTANCE_TO_GROUND 3                   // 3 inches from sensor to ground when drone stationary


#define PID_SAMPLE_RATE_PER_SEC 1
#define LED_PIN (LED_BUILTIN)                                      // Pin for the LED 
#define SPEED_MIN (1000)                                  // Set the Minimum Speed in microseconds
#define SPEED_MAX (2000)                                  // Set the Minimum Speed in microseconds
  
Adafruit_BNO055 bno = Adafruit_BNO055(55);

ESC ESC_BL (9, SPEED_MIN, SPEED_MAX, 500);                 // ESC_Name (ESC PIN, Minimum Value, Maximum Value, Default Speed, Arm Value)
ESC ESC_BR (10, SPEED_MIN, SPEED_MAX, 500);                 // ESC_Name (ESC PIN, Minimum Value, Maximum Value, Default Speed, Arm Value)
ESC ESC_FR (11, SPEED_MIN, SPEED_MAX, 500);                 // ESC_Name (ESC PIN, Minimum Value, Maximum Value, Default Speed, Arm Value)
ESC ESC_FL (12, SPEED_MIN, SPEED_MAX, 500);                 // ESC_Name (ESC PIN, Minimum Value, Maximum Value, Default Speed, Arm Value)

int oESC;                                                 // Variable for the speed sent to the ESC

/* Joystick values from controller */
int JOYSTICK_LX;
int JOYSTICK_LY;
int JOYSTICK_RX;
int JOYSTICK_RY;

/* Target values for roll, pitch, and yaw */
double TARGET_ROLL;
double TARGET_PITCH;
double TARGET_YAW;

double MOTOR_VAL_FL = SPEED_MIN;
double MOTOR_VAL_FR = SPEED_MIN;
double MOTOR_VAL_BL = SPEED_MIN;
double MOTOR_VAL_BR = SPEED_MIN;

double ALTITUDE = 0.0;
double TARGET_ALTITUDE = 20;

volatile long ECHO_START = 0;                         // Records start of echo pulse 
volatile long ECHO_END = 0;                           // Records end of echo pulse
volatile long ECHO_DURATION = 0;                      // Duration - difference between end and start
volatile int TRIGGER_TIME_COUNT = 0;                  // Count down counter to trigger pulse time

bool WAITFORSTART = false;


void calibrateAll(){
  ESC_FL.calib();
  ESC_FL.stop();

  ESC_FR.calib();
  ESC_FR.stop();
  
  ESC_BL.calib();
  ESC_BL.stop();
  
  ESC_BR.calib();  
  ESC_BR.stop(); 
  
}


void BNO_setup(void){
  Serial.print("Setting up BNO055....");
  /* Initialise the sensor */
  if(!bno.begin())
  {
    /* There was a problem detecting the BNO055 ... check your connections */
    while(1){
      Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
      delay(2000);    
    }
  }
  
  delay(1000);
    
  bno.setExtCrystalUse(true);
  Serial.println("Done!");
  
}

void Timer1Setup(void){
  Serial.print("Setting up Timer 1...");
  pinMode(trigPin, OUTPUT);                           // Trigger pin set to output
  pinMode(echoPin, INPUT);                            // Echo pin set to input
  
  Timer1.initialize(TIMER1_US);                        // Initialise timer 1
  Timer1.attachInterrupt( timer1Isr );                 // Attach interrupt to the timer service routine 
  attachInterrupt(digitalPinToInterrupt(echoPin), echoInterrupt, CHANGE);  // Attach interrupt to the sensor echo input
  Serial.println("Done!");
}

void Timer3Setup(void){
  Serial.print("Setting up Timer....");
  Timer3.initialize(1000000 / PID_SAMPLE_RATE_PER_SEC);
  Timer3.attachInterrupt(timer3IsrPidLoop);
  Serial.println("Done!");
}

void StartButtonSetup(void){
  Serial.print("Setting up push button...");
  pinMode(2, INPUT);
  attachInterrupt(digitalPinToInterrupt(2), startButtonPushed, FALLING);
  Serial.println("Done!");
}

void startButtonPushed(void){
  Serial.println("Start Button Pressed!!!");
  WAITFORSTART = true;
}

void timer1Isr(void){
 static volatile int state = 0;                 // State machine variable

    if (!(--TRIGGER_TIME_COUNT))                   // Count to 200mS
    {                                              // Time out - Initiate trigger pulse
       TRIGGER_TIME_COUNT = TICK_COUNTS;           // Reload
       state = 1;                                  // Changing to state 1 initiates a pulse
    }
  
    switch(state)                                  // State machine handles delivery of trigger pulse
    {
      case 0:                                      // Normal state does nothing
          break;
      
      case 1:                                      // Initiate pulse
         digitalWrite(trigPin, HIGH);              // Set the trigger output high
         state = 2;                                // and set state to 2
         break;
      
      case 2:                                      // Complete the pulse
      default:      
         digitalWrite(trigPin, LOW);               // Set the trigger output low
         state = 0;                                // and return state to normal 0
         break;
   }
}


// --------------------------
// echo_interrupt() External interrupt from HC-SR04 echo signal. 
// Called every time the echo signal changes state.
//
void echoInterrupt()
{
  switch (digitalRead(echoPin))                     // Test to see if the signal is high or low
  {
    case HIGH:                                      // High so must be the start of the echo pulse
      ECHO_END = 0;                                 // Clear the end time
      ECHO_START = micros();                        // Save the start time
      break;
      
    case LOW:                                       // Low so must be the end of hte echo pulse
      ECHO_END = micros();                          // Save the end time
      ECHO_DURATION = ECHO_END - ECHO_START;        // Calculate the pulse duration
      double tmp_altitude = ECHO_DURATION / 148 - SENSOR_DISTANCE_TO_GROUND; 
      /* Ignore case where value is larger than max detectable by sensor */
      if (tmp_altitude > 158){
        break;
      }
      ALTITUDE = tmp_altitude;
      break;
  }
}


void timer3IsrPidLoop(void){
  digitalWrite(LED_PIN, digitalRead(LED_PIN) ^ 1 );
  //readSpeedFromWifi();
}


void readSpeedFromWifi(){
  String input;
  if(Serial1.available()){
    input = Serial1.readStringUntil('\n');
    //Serial.println(input);


    /* Parse the joystick values */
    /**
     *  Format is
     *  "LX=100 LY=200 RX=300 RY=400\n"
     */
    int startIndex = 0;
    int spaceIndex = 0;
    String substr;
    String value;
    
    spaceIndex = input.indexOf(' ', spaceIndex);
    substr = input.substring(startIndex, spaceIndex); 
    value = substr.substring(3, substr.length()); 
    JOYSTICK_LX = value.toInt(); 
    startIndex = spaceIndex;
    

    spaceIndex = input.indexOf(' ', spaceIndex + 1);
    substr = input.substring(startIndex + 1, spaceIndex);
    value = substr.substring(3, substr.length()); 
    JOYSTICK_LY = value.toInt();
    startIndex = spaceIndex; 
    
    spaceIndex = input.indexOf(' ', spaceIndex + 1);
    substr = input.substring(startIndex + 1, spaceIndex);
    value = substr.substring(3, substr.length()); 
    JOYSTICK_RX = value.toInt();
    startIndex = spaceIndex; 

    spaceIndex = input.indexOf(' ', spaceIndex + 1);
    substr = input.substring(startIndex + 1, spaceIndex);
    value = substr.substring(3, substr.length()); 
    JOYSTICK_RY = value.toInt();
    startIndex = spaceIndex;
    
  }
}

void calculateThrust(void){
  /* Determine speed from controller */
  //readSpeedFromWifi();

  /* final thrust = altitude pid + balance pid */
  /* Altitude PID */
  double error = TARGET_ALTITUDE - ALTITUDE; 

  /* Determine Attitude of drone */ 
  //Serial.println("Reading attitude");
  sensors_event_t event; 
  bno.getEvent(&event);

  /* TODO Calculate thrust based on controller input */

  /* Else try to keep Pitch and Roll as close to 0 as possible */
  TARGET_PITCH = 0;
  TARGET_ROLL = 0;
  Serial.print(JOYSTICK_LX); Serial.print(" ");
  Serial.print(JOYSTICK_LY); Serial.print(" ");
  Serial.print("         ");
  Serial.print(JOYSTICK_RX); Serial.print(" ");
  Serial.print(JOYSTICK_RY); Serial.println(" "); 

 
}

void ESCArmAll(){
  Serial.print("Arming ESCs...");
  ESC_FL.arm();                                            // Send the Arm value so the ESC will be ready to take commands
  ESC_FR.arm();                                            // Send the Arm value so the ESC will  be ready to take commands
  ESC_BL.arm();                                            // Send the Arm value so the ESC will be ready to take commands
  ESC_BR.arm();                                            // Send the Arm value so the ESC will be ready to take commands
  delay(3000);                                            // Wait for a while

  Serial.println("Done!");

}


void takeoff(void){
  /* Start the motors, and slowly ramp up until we reach 1ft off the ground */
  Serial.println("Taking off!");
  ESC_FL.speed(SPEED_MIN);
  ESC_FR.speed(SPEED_MIN);
  ESC_BL.speed(SPEED_MIN);
  ESC_BR.speed(SPEED_MIN);
  delay(3000);
}

void setup() {
  Serial.begin(115200);
  
  /* Serial1 used to read from ESP8266 */
  Serial1.begin(115200); 
  pinMode(LED_PIN, OUTPUT);                               // LED Visual Output

  BNO_setup();
  Timer1Setup();
  //Timer3Setup();
  StartButtonSetup();

//  calibrateAll();  
  ESCArmAll();
  
  while(!WAITFORSTART){
    Serial.print(".");
    delay(1000);
  }

  digitalWrite(LED_PIN, HIGH);                            // LED High Once Armed
  

  
  takeoff();
}


void loop() {
  Serial.print("Altitude:");
  Serial.print(ALTITUDE);
  Serial.print("\t");
  calculateThrust();
  
  //readSpeedFromWifi();

  
  //digitalWrite(LED_PIN, LOW);                            // LED High Once Armed
//  for (oESC = SPEED_MIN; oESC <= SPEED_MIN + 500; oESC += 1) {  // goes from 1000 microseconds to 2000 microseconds
//    ESC_FL.speed(oESC);                                    // tell ESC to go to the oESC speed value
//    ESC_FR.speed(oESC);                                    // tell ESC to go to the oESC speed value
//    ESC_BL.speed(oESC);                                    // tell ESC to go to the oESC speed value
//    ESC_BR.speed(oESC);                                    // tell ESC to go to the oESC speed value
//    delay(10);                                            // waits 10ms for the ESC to reach speed
//  }
//  while(1){
//    digitalWrite(LED_PIN, HIGH);
//    delay(500);
//    digitalWrite(LED_PIN, LOW);
//    delay(500);
//  }
//  delay(5000);
//  //digitalWrite(LED_PIN, LOW);                            // LED High Once Armed
//  for (oESC = SPEED_MIN + 500; oESC >= SPEED_MIN; oESC -= 1) {  // goes from 2000 microseconds to 1000 microseconds
//    ESC_FL.speed(oESC);                                    // tell ESC to go to the oESC speed value
//    ESC_FR.speed(oESC);                                    // tell ESC to go to the oESC speed value
//    ESC_BL.speed(oESC);                                    // tell ESC to go to the oESC speed value
//    ESC_BR.speed(oESC);                                    // tell ESC to go to the oESC speed value    delay(10);                                            // waits 10ms for the ESC to reach speed  
//     delay(10);
//   }
//  delay(5000);                                            // Wait for a while befor restart
}
